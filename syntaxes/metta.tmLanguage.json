{
  "scopeName": "source.metta",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#brackets"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#specialKeywords"
    },
    {
      "include": "#controllers"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "match": "\\b(if|let|let*|not|else|case|then|while|for|def|return|and|or|empty)\\b",
          "name": "keyword.control.metta"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "match": "\\$(\\w+)",
          "captures": {
            "1": {
              "name": "variable.parameter.metta"
            }
          }
        }
      ]
    },
    "brackets": {
      "patterns": [
        {
          "match": "[()]",
          "name": "punctuation.section.parens.metta"
        },
        {
          "match": "[{}]",
          "name": "punctuation.section.braces.metta"
        },
        {
          "match": "[\\[\\]]",
          "name": "punctuation.section.brackets.metta"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "match": ";.*$",
          "name": "comment.line.semicolon.metta"
        }
      ]
    },
    "specialKeywords": {
      "patterns": [
        {
          "match": "\\b(ERROR)\\b",
          "name": "keyword.error.metta"
        },
        {
          "match": "\\b(Nil|True|False|Bool|Number)\\b",
          "name": "keyword.numbers.metta"
        },
        {
          "match": "\\b(match|println|trace|assertEqualToResult|car-atom|collapse|superpose|bind|import|add-reduct|pragma|remove-atom|cdr-atom|cons-atom|new-space|quote|assertEqual|add-atom|get-type|get-metatype|mod-space|unify)\\b",
          "name": "keyword.operator.match.metta"
        },
        {
          "match":"\\b\\d+\\b",
          "name": "keyword.numbers.metta"
        },
        {
          "match": "\"([^\"]*)\"",
          "name":"keyword.string.metta"
        }
      ]
    },
    "controllers": {
      "patterns": [
        {
          "match": "[+\\-*/=><%]",
          "name": "keyword.operator.metta"
        }
      ]
    }
  }
}
